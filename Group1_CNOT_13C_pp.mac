############################################################
#
# A pulse sequence suitable for performing the Group1_CNOT_13C experiment,
# Polarization transferred from Proton to Carbon.
#
#  H  90-d-180-d--90----
#  C  ---d-180-d--90-acq
#
############################################################

procedure(pulse_program,dir,mode)

# Interface description (name, label, control, vartype)
  interface = ["nucleus",          "Nucleus",                   "tb", "readonly_string";
               "b1Freq13C",        "13C frequency (MHz)",       "tb", "freq";
               "b1Freq1H",         "1H frequency (MHz)",        "tb", "freq";
               "centerFreqPPM13C", "Center freq. 13C (ppm)",    "tb", "float";
               "centerFreqPPM1H",  "Center freq. 1H (ppm)",     "tb", "float";
               "pulseLength1H",    "90 pulse length 1H (us)",   "tb", "pulselength";
               "90Amplitude1H",    "90 pulse amp. 1H (dB)",     "tb", "pulseamp";
               "pulseLength13C",   "90 pulse length 13C (us)",  "tb", "pulselength";
               "90Amplitude13C",   "90 pulse amp. 13C (dB)",    "tb", "pulseamp";
               "90AmplitudeHC",    "90 HC Pulse amp (dB)",      "tb", "pulseamp";
               "dEvolution",       "Evolution Delay (ms)",      "tb", "reptime";
               "acqDelay",         "Acquisition Delay (us)",    "tb", "reptime";
               "shiftPoints",      "Number of points to shift", "tb",  "float,[0,3]";
               "repTime",          "Repetition time (ms)",      "tb", "reptime"]

# Relationships to determine remaining variable values
   relationships = ["b1Freq        = b1Freq13C",
                    "n1            = nrPnts",
                    "a90H          = 90Amplitude1H",
                    "d90H          = pulseLength1H",     
                    "d90C          = pulseLength13C", 
                    "a90HC         = 90AmplitudeHC",
                    "a90C          = 90Amplitude13C",
                    "dEvolution    = 1e3*dEvolution-pgo",
                    "dAcq          = acqDelay",
                    "offFreq13C    = (centerFreqPPM13C-wvPPMOffset13C)*b1Freq13C",
                    "offFreq1H     = (centerFreqPPM1H-wvPPMOffset1H)*b1Freq1H",
                    "b1FreqTxCh1   = double(b1Freq1H)+double(offFreq1H/1e6d)",
                    "b1FreqTxCh2   = double(b1Freq13C)+double(offFreq13C/1e6d)",
                    "b1FreqRx      = b1FreqTxCh2",
                    "freq1H        = b1FreqTxCh1",
                    "freq13C       = b1FreqTxCh2",
                    "totPnts       = nrPnts",
                    "totTime       = acqTime"]

# Define the pulse program parameter groups and their order
   groups = ["Pulse_sequence","Progress","Acquisition",
             "Processing_Std","Display_Std","File_Settings"]

# These parameters will be changed between experiments
   variables = [""]


# Pulse sequence
   initpp(dir) # Reset internal parameter list

   cleardata(n1)

   pVal = "P2"

   # ======= P0 =======
   if pVal == "P0"
      print("Running with P0")

      #Detection  pulse
      pulse(2,a90C,p2,d90C)
   # ======= P1 =======
   elseif pVal == "P1"
      print("Running with P1")

      # 90y-H pulse
      pulse(1,a90HC,p1,d90C)  
   
      # Evolution delay 
      delay(dEvolution) 
  
      # 90x-H and 90y-C pulse
      pulse(1,a90HC,p2,freq1H,2,a90C,p1,freq13C,d90C) 

      # Evolution delay
      delay(dEvolution) 

      #  90x-C pulse
      pulse(2,a90C,p2,d90C)  
      
      #Detection  pulse
      delay(0.25)
      pulse(2,a90C,p2,d90C)
   # ======= P2 =======
   elseif pVal == "P2"
      print("Running with P2")

      #  90y-C pulse
      pulse(2,a90C,p1,d90C) 

      # Evolution delay 
      delay(dEvolution) 
  
      # 90y-H and 90x-C pulse
      pulse(1,a90HC,p1,freq1H,2,a90C,p2,freq13C,d90C) 

      # Evolution delay
      delay(dEvolution) 

      # 90x-H pulse
      pulse(1,a90HC,p2,d90C)

      delay(0.25)

      #hadamard sequence
      pulse(1,a90HC,p1,freq1H,2,a90C,p5,freq13C,d90C)
      delay(0.25)
      pulse(1,a90HC,p5,freq1H,2,a90C,p1,freq13C,d90C)
      delay(0.25)

      # Acquisition pulse
      pulse(2,a90C,p2,d90C) 

   endif
 
   # Acqusition delay
   delay(dAcq)

   acquire("overwrite", n1)

   lst = endpp(mode) # Return parameter list

# Phase cycle list
  phaseList  = [1,3,1,3;   # phase 1
                0,2,0,2;   # phase 2
                0,2,0,2;
                2,0,2,0;
                3,1,3,1;
                0,2,0,2]   # acquire phase
  

endproc(lst,groups,interface,relationships,variables,dim=null,phaseList)


#####################################################
# Assign those parameters which should take their 
# values from the factory defaults when making a 
# new experiment
#####################################################

procedure(getFactoryBasedParameters, par)

   specPar = SpinsolveParameterUpdater:readDSPParameters("13C")
   if(specPar == null)
      return(null)
   endif
   assignlist(specPar)

   modelPar = ucsUtilities:getModelBasedParameters("13C",specPar) 

   (shiftPoints, acqDelay) = :getPreAcquDelay(Pulse_length_X, modelPar->dwellTime)


   par = ["b1Freq13C         = $Frequency_X$",
          "rxGain            = $modelPar->rxGain$",
          "b1Freq1H          = $Frequency_1H$",
          "90Amplitude1H     = $PowerLevel_1H$",
          "pulseLength1H     = $PulseLength_1H$",
          "90Amplitude13C    = $Power_level_X$",
          "180Amplitude13C   = $Power_level_X$+6",
          "90AmplitudeHC     = $Power_level_HX90$",
          "180AmplitudeHC    = $Power_level_HX180$",
          "pulseLengthH180   = $PulseLength_1H_Decouple$",
          "decoupleAmp       = $PowerLevel_1H_Decouple$",
          "shiftPoints       = $shiftPoints$",
          "acqDelay          = $acqDelay$",
          "pulseLength13C    = $Pulse_length_X$"]


endproc(par)

########################################################
# Calculate the preacquisiton delay
########################################################

procedure(getPreAcquDelay, pulseLength, dwellTime)

   shiftPoints = 0
   preacqDelay = 0

   while(preacqDelay < 20)
      shiftPoints = shiftPoints + 1
      preacqDelay = (shiftPoints - 0.72)*dwellTime - 0.66*pulseLength + 10
   endwhile   

   if(shiftPoints > 3)
      shiftPoints = 3
      preacqDelay = 20
   endif()

endproc(shiftPoints, preacqDelay)

